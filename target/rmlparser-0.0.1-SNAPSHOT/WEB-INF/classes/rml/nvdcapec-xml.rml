@prefix rr:     <http://www.w3.org/ns/r2rml#> .
@prefix rml:    <http://semweb.mmlab.be/ns/rml#> .
@prefix ql:     <http://semweb.mmlab.be/ns/ql#> .
@prefix carml:  <http://carml.taxonic.com/carml/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix cwe: <http://sepses.ifs.tuwien.ac.at/vocab/ref/cwe#> .
@prefix capec: <http://sepses.ifs.tuwien.ac.at/vocab/ref/capec#> .

<#CAPECCatalogMapping>
     rml:logicalSource [
         rml:source [
             a carml:Stream;  
         ];
      
         rml:referenceFormulation ql:XPath;
		 rml:iterator "/Attack_Pattern_Catalog"
     ];
     rr:subjectMap [
         rr:template "http://w3id.org/sepses/resource/cwe/catalog/{concat(@version,translate(@Date,'-',''))}";
         rr:class cwe:AttackPatternCatalog
     ];
       rr:predicateObjectMap [
        rr:predicate cwe:catalogVersion;
        rr:objectMap [ rml:reference "@Version" ];
        rr:datatype xsd:string ;
     ];
        rr:predicateObjectMap [
        rr:predicate cwe:catalogDate;
        rr:objectMap [ rml:reference "@Date" ];
        rr:datatype xsd:dateTime ;
     ];
             rr:predicateObjectMap [
        rr:predicate cwe:catalogName;
        rr:objectMap [ rml:reference "@Name" ];
        rr:datatype xsd:dateTime ;
     ];
     .
 <#CAPECMapping>
     rml:logicalSource [
         rml:source [
             a carml:Stream;  
                  
         ];
      
         rml:referenceFormulation ql:XPath;
		 rml:iterator "/Attack_Pattern_Catalog/Attack_Patterns/Attack_Pattern"
     ];
     rr:subjectMap [
         rr:template "http://example.org/sepses/capec#CAPEC-{@ID}";
     ];
     rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:template "http://sepses.ifs.tuwien.ac.at/vocab/ref/capec#CAPEC" ];
     ];
      rr:predicateObjectMap [
        rr:predicate capec:CAPECId;
        rr:objectMap [ rml:reference "@ID" ];
        rr:datatype xsd:string ;
     ];
    rr:predicateObjectMap [
        rr:predicate capec:CAPECName;
        rr:objectMap [ rml:reference  "@Name" ];
        rr:datatype xsd:string ;
     ];
    rr:predicateObjectMap [
        rr:predicate capec:CAPECAbstraction;
        rr:objectMap [ rml:reference  "@Abstraction" ];
        rr:datatype xsd:string ;
     ];
    rr:predicateObjectMap [
        rr:predicate capec:CAPECStructure;
        rr:objectMap [ rml:reference "@Structure" ];
        rr:datatype xsd:string ;
     ];
     
     rr:predicateObjectMap [
        rr:predicate capec:CAPECStatus;
        rr:objectMap [ rml:reference  "@Status" ];
        rr:datatype xsd:string ;
     ];
      rr:predicateObjectMap [
        rr:predicate capec:CAPECdescription;
        rr:objectMap [ rml:reference "Description" ];
        rr:datatype xsd:string ;
     ];
     
        rr:predicateObjectMap [
        rr:predicate capec:likelihoodOfAttack;
        rr:objectMap [ rml:reference "Likelihood_Of_Attack" ; 
      ];  
     ];
     
            rr:predicateObjectMap [
        rr:predicate capec:typicalSeverity;
        rr:objectMap [ rml:reference "Typical_Severity" ; 
      ];  
     ];
     
     rr:predicateObjectMap [
        rr:predicate capec:hasRelatedAttackPattern;
        rr:objectMap [ rr:parentTriplesMap <#CAPECRelatedAttackPatternMapping> ; 
	     carml:multiJoinCondition [
	        rr:child "Related_Attack_Patterns/Related_Attack_Pattern/concat(concat(concat(@CAPEC_ID,@Nature),@View_ID),ancestor::Attack_Pattern/@ID)" ;
	        rr:parent "concat(concat(concat(@CAPEC_ID,@Nature),@View_ID),ancestor::Attack_Pattern/@ID)" ;
	      ] 
      ];  
     ];
     
      rr:predicateObjectMap [
        rr:predicate capec:hasExecutionFlow;
        rr:objectMap [ rr:parentTriplesMap <#CAPECExecutionFlowMapping> ; 
	     carml:multiJoinCondition [
	        rr:child "Execution_Flow/Attack_Step/concat(ancestor::Attack_Pattern/@ID,string-length())" ;
	        rr:parent "concat(ancestor::Attack_Pattern/@ID,string-length())" ;
	      ] 
      ];  
     ];
     
      
        rr:predicateObjectMap [
        rr:predicate capec:prerequisites;
        rr:objectMap [ carml:multiReference "Prerequisites/Prerequisite" ; 
	    
      ];  
     ];
     
      rr:predicateObjectMap [
        rr:predicate capec:resourceRequired;
        rr:objectMap [ carml:multiReference "Resources_Required/Resource" ; 
	    
      ];  
     ];
     
      rr:predicateObjectMap [
        rr:predicate capec:hasConsequence;
        rr:objectMap [ rr:parentTriplesMap <#CAPECConsequenceMapping> ; 
	     carml:multiJoinCondition [
	        rr:child "Consequences/Consequence/concat(ancestor::Attack_Pattern/@ID,string-length())" ;
	        rr:parent "concat(ancestor::Attack_Pattern/@ID,string-length())" ;
	      ] 
      ];  
     ];
      rr:predicateObjectMap [
        rr:predicate capec:hasSkillRequired;
        rr:objectMap [ rr:parentTriplesMap <#CAPECSkillRequiredMapping> ; 
	     carml:multiJoinCondition [
	        rr:child "Skills_Required/Skill/concat(ancestor::Attack_Pattern/@ID,string-length())" ;
	        rr:parent "concat(ancestor::Attack_Pattern/@ID,string-length())" ;
	      ] 
      ];  
     ];
     
      rr:predicateObjectMap [
        rr:predicate capec:hasMitigation;
        rr:objectMap [ carml:multiReference "Mitigations/Mitigation" ; 
	     
      ];  
     ];
           
     
     rr:predicateObjectMap [
        rr:predicate capec:hasRelatedWeakness;
        rr:objectMap [ carml:multiTemplate "http://example.org/sepses/cwe#CWE-{Related_Weaknesses/Related_Weakness/@CWE_ID}" ; 
	      
      ];  
     ];
       
   
  .  
  <#CAPECSkillRequiredMapping>
	rml:logicalSource [
		  rml:source [
		    a carml:Stream ;
		  ] ;  
         rml:referenceFormulation ql:XPath;
		 rml:iterator "Attack_Pattern_Catalog/Attack_Patterns/Attack_Pattern/Skills_Required/Skill"
		] ;
		
	rr:subjectMap [
		  rr:template "http://example.org/sepses/capec/skillRequired#{concat(ancestor::Attack_Pattern/@ID,string-length())}";
       ] ;
       
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:template "http://sepses.ifs.tuwien.ac.at/vocab/ref/capec#SkillRequired" ];
     ];
     
    rr:predicateObjectMap [
        rr:predicate capec:skillLevel;
        rr:objectMap [ rml:reference "@Level" ];
     ];
     
     rr:predicateObjectMap [
        rr:predicate capec:skillDescription;
        rr:objectMap [ rml:reference "text()" ];
     ];        
     .
    <#CAPECRelatedAttackPatternMapping>
	rml:logicalSource [
		  rml:source [
		    a carml:Stream ;
		  ] ;  
         rml:referenceFormulation ql:XPath;
		 rml:iterator "Attack_Pattern_Catalog/Attack_Patterns/Attack_Pattern/Related_Attack_Patterns/Related_Attack_Pattern"
		] ;
		
	rr:subjectMap [
		  rr:template "http://example.org/sepses/capec/relatedAttackPattern#{concat(concat(concat(ancestor::Attack_Pattern/@ID,@Nature),@CAPEC_ID),@View_ID)}";
       ] ;
       
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:template "http://sepses.ifs.tuwien.ac.at/vocab/ref/capec#RelatedAttackPattern" ];
     ];
     
    rr:predicateObjectMap [
        rr:predicate capec:relatedAttackPatternCAPECId;
        rr:objectMap [ rr:template "http://example.org/sepses/capec#CAPEC-{@CAPEC_ID}" ];
        rr:datatype xsd:string ;
    ];
    rr:predicateObjectMap [
        rr:predicate capec:relatedAttackPatternNature;
        rr:objectMap [ rml:reference "@Nature" ];
        rr:datatype xsd:string ;
    ];
    rr:predicateObjectMap [
        rr:predicate capec:relatedAttackPatternViewId;
        rr:objectMap [ rml:reference "@View_ID" ];
        rr:datatype xsd:string ;
    ];
   
   .
     <#CAPECConsequenceMapping>
  rml:logicalSource [
		  rml:source [
		    a carml:Stream ;
		  ] ;  
         rml:referenceFormulation ql:XPath;
		 rml:iterator "Attack_Pattern_Catalog/Attack_Patterns/Attack_Pattern/Consequences/Consequence"
		] ;
		
	rr:subjectMap [
		  rr:template "http://example.org/sepses/capec/Consequence#{concat(ancestor::Attack_Pattern/@ID,string-length())}";
       ] ;
       
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:template "http://sepses.ifs.tuwien.ac.at/vocab/ref/capec#Consequence" ];
     ];
     
    rr:predicateObjectMap [
        rr:predicate capec:consequenceScope;
        rr:objectMap [ carml:multiReference "Scope" ];
     ];
    rr:predicateObjectMap [
        rr:predicate capec:consequenceImpact;
        rr:objectMap [ carml:multiReference "Impact" ];
     ];
    rr:predicateObjectMap [
        rr:predicate capec:consequenceNote;
        rr:objectMap [ carml:multiReference "Note" ];
     ];
   .
   <#CAPECExecutionFlowMapping>
  rml:logicalSource [
		  rml:source [
		    a carml:Stream ;
		  ] ;  
         rml:referenceFormulation ql:XPath;
		 rml:iterator "Attack_Pattern_Catalog/Attack_Patterns/Attack_Pattern/Execution_Flow/Attack_Step"
		] ;
		
	rr:subjectMap [
		  rr:template "http://example.org/sepses/capec/ExecutionFlow#{concat(ancestor::Attack_Pattern/@ID,Step)}";
       ] ;
       
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:template "http://sepses.ifs.tuwien.ac.at/vocab/ref/capec#AttackStep" ];
     ];
     
    rr:predicateObjectMap [
        rr:predicate capec:attackStep;
        rr:objectMap [ rml:reference "Step" ];
     ];
    rr:predicateObjectMap [
        rr:predicate capec:attackStepPhase;
        rr:objectMap [ carml:multiReference "Phase" ];
     ];
    rr:predicateObjectMap [
        rr:predicate capec:attackStepDescription;
        rr:objectMap [ carml:multiReference "Description" ];
     ];
rr:predicateObjectMap [
        rr:predicate capec:attackStepTechnique;
        rr:objectMap [ carml:multiReference "Technique" ];
     ];     
     .
  
   
